import os
import pandas as pd
import numpy as np
from sklearn.model_selection import train_test_split
from tensorflow.keras.preprocessing.image import ImageDataGenerator
from tensorflow.keras.applications import Xception
from tensorflow.keras.layers import GlobalAveragePooling2D, Dropout, Dense, Input
from tensorflow.keras.models import Model
from tensorflow.keras.optimizers.legacy import Adam
from tensorflow.keras.callbacks import EarlyStopping, ModelCheckpoint
from tensorflow.keras.models import load_model
import seaborn as sns
import matplotlib.pyplot as plt
from PIL import Image
from tensorflow.python.ops.confusion_matrix import confusion_matrix

labelsdf = pd.read_csv("/Users/chrimar3/projects/html/djsite/lab/labels.csv")
labelsdf["id"] = labelsdf["id"].apply(lambda x: x + ".jpg")
plt.figure(figsize=(20,5))
plt.xticks(rotation=90)
sns.countplot(data=labelsdf, x='breed')
plt.title('Distribution of dog breeds')
# plt.show()

RANDOM_STATE = 42
train_df, test_df = train_test_split(labelsdf, test_size=0.1, random_state=RANDOM_STATE)
train_df, val_df = train_test_split(train_df, test_size=0.2, random_state=RANDOM_STATE)

sample_images = train_df.sample(n=9)
plt.figure(figsize=(10,10))

image_sizes = [Image.open(f'/Users/chrimar3/projects/Dogbreeds/data/train/{img_id}').size for img_id in train_df['id']]

# Print some stats about image sizes
#print(f'Min width: {min(sz[0] for sz in image_sizes)}')
#print(f'Max width: {max(sz[0] for sz in image_sizes)}')
#print(f'Min height: {min(sz[1] for sz in image_sizes)}')
#print(f'Max height: {max(sz[1] for sz in image_sizes)}')

# setup model constants
SIZE = (350,350)
BATCH_SIZE = 32
NUM_CLASSES = len(labelsdf['breed'].unique())
LEARNING_RATE = 0.001
DROPOUT_RATE = 0.7
EPOCHS = 5

train_datagen = ImageDataGenerator(rescale=1./255)
test_datagen = ImageDataGenerator(rescale=1./255)
val_datagen = ImageDataGenerator(rescale=1./255)

# Data generators
train_generator = train_datagen.flow_from_dataframe(train_df, '/Users/chrimar3/projects/Dogbreeds/data/train', 'id', 'breed', target_size=SIZE, batch_size=BATCH_SIZE, class_mode='categorical')
test_generator = test_datagen.flow_from_dataframe(test_df, '/Users/chrimar3/projects/Dogbreeds/data/train', 'id', 'breed', target_size=SIZE, batch_size=BATCH_SIZE, class_mode='categorical')
val_generator = val_datagen.flow_from_dataframe(val_df, '/Users/chrimar3/projects/Dogbreeds/data/train', 'id', 'breed', target_size=SIZE, batch_size=BATCH_SIZE, class_mode='categorical')

# Base model
input_tensor = Input(shape=(SIZE[0], SIZE[1], 3))
base_model = Xception(weights='imagenet', include_top=False, input_tensor=input_tensor)
base_model.trainable = False


# Output layer
x = base_model.output
x = GlobalAveragePooling2D()(x)
x = Dropout(DROPOUT_RATE)(x)
output = Dense(NUM_CLASSES, activation='softmax')(x)


# Compile model
model = Model(inputs=input_tensor, outputs=output)
model.compile(optimizer=Adam(learning_rate=LEARNING_RATE), loss='categorical_crossentropy', metrics=['accuracy'])

# Callbacks
early_stopping = EarlyStopping(monitor='val_loss', patience=4, verbose=1)
model_checkpoint = ModelCheckpoint('dogmodel.h5', monitor='val_loss', save_best_only=True, verbose=1) #model.h5

# Train model

history = model.fit(train_generator,
                    validation_data=val_generator,
                    steps_per_epoch=train_generator.samples//BATCH_SIZE,
                    validation_steps=val_generator.samples//BATCH_SIZE,
                    epochs=EPOCHS,
                    callbacks=[early_stopping, model_checkpoint])


# Evaluate model on test data
score = model.evaluate(test_generator)
print("Test loss:", score[0])
print("Test accuracy:", score[1])

# Calculate confusion matrix
confusion_mtx = confusion_matrix(test_generator.classes, y_pred_classes)

# Normalize confusion matrix
confusion_mtx = confusion_mtx.astype('float') / confusion_mtx.sum(axis=1)[:, np.newaxis]

# Getting the list of dog breed names
class_names = test_generator.class_indices.keys()

# Plot the confusion matrix
plt.figure(figsize=(50, 50))

sns.set(font_scale=1.2)
hm = sns.heatmap(confusion_mtx, annot=True, fmt=".0f", cmap='Blues', xticklabels=class_names, yticklabels=class_names)

# Improve the visibility of the labels
hm.set_xticklabels(hm.get_xmajorticklabels(), fontsize = 18)
hm.set_yticklabels(hm.get_ymajorticklabels(), fontsize = 18)

plt.ylabel('True label', fontsize=20)
plt.xlabel('Predicted label', fontsize=20)
#plt.show()
loadmodel = load_model('final_model.h5')
score = loadmodel.evaluate(test_generator)
print("Test loss:", score[0])
print("Test accuracy:", score[1])

model.save('dog_model.h5')
